/* File: gnv$evalfile.c_first gnv_evalfile.c_first
 *
 * $Id: gnv_evalfile.c_first,v 1.3 2013/06/09 00:02:37 wb8tyw Exp $
 *
 * Copyright 2012, John Malmberg
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <unistd.h>

/* Bash tries to read the entire file into memory with one read() call.
 * VMS will tend to stop at 65534 or record boundaries depending on the
 * file type, so to read a file, read until the allocated size, or 0 bytes
 * are read to indicate an EOF.
 */

static ssize_t vms_bash_readfile(int fd, void * string, size_t file_size) {
size_t tnext;
ssize_t tresult;
char * charstr;

    charstr = (char *)string;
    tnext = 0;
    do {
	tresult = read (fd, &charstr[tnext], file_size);
	if ((tresult > 0) && (tnext < file_size)) {
            tnext += tresult;
	}
    } while ((tresult > 0) && (tnext < file_size));

    return tnext;
}

/* Replace the read() call with a wrapper */
#define read(__fd, __str, __size)  vms_bash_readfile(__fd, __str, __size)
